/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import org.jfree.chart.ChartFactory
import org.jfree.chart.ChartUtils
import org.jfree.chart.JFreeChart
import org.jfree.chart.axis.NumberAxis
import org.jfree.chart.labels.ItemLabelAnchor
import org.jfree.chart.labels.ItemLabelPosition
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator
import org.jfree.chart.plot.CategoryPlot
import org.jfree.chart.renderer.category.StatisticalBarRenderer
import org.jfree.chart.ui.TextAnchor
import org.jfree.data.category.CategoryDataset
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset
import org.jfree.svg.SVGGraphics2D
import org.jfree.svg.SVGUtils
import java.awt.Color
import java.awt.GradientPaint
import java.awt.Rectangle
import java.io.File

private fun createDataset(): CategoryDataset {
    val dataset
            : DefaultStatisticalCategoryDataset = DefaultStatisticalCategoryDataset()
    dataset.add(10.0, 2.4, "Row 1", "Column 1")
    dataset.add(15.0, 4.4, "Row 1", "Column 2")
    dataset.add(13.0, 2.1, "Row 1", "Column 3")
    dataset.add(7.0, 1.3, "Row 1", "Column 4")
    dataset.add(22.0, 2.4, "Row 2", "Column 1")
    dataset.add(18.0, 4.4, "Row 2", "Column 2")
    dataset.add(28.0, 2.1, "Row 2", "Column 3")
    dataset.add(17.0, 1.3, "Row 2", "Column 4")
    return dataset
}

/**
 * Creates a sample chart.
 *
 * @param dataset  a dataset.
 *
 * @return The chart.
 */
private fun createChart(dataset: CategoryDataset): JFreeChart {
    val chart: JFreeChart = ChartFactory.createLineChart(
        "Statistical Bar Chart Demo 1", "Type", "Value", dataset
    )

    val plot: CategoryPlot = chart.getPlot() as CategoryPlot

    // customise the range axis...
    val rangeAxis: NumberAxis = plot.getRangeAxis() as NumberAxis
    rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits())
    rangeAxis.setAutoRangeIncludesZero(false)

    // customise the renderer...
    val renderer: StatisticalBarRenderer = StatisticalBarRenderer()
    renderer.setDrawBarOutline(false)
    renderer.setErrorIndicatorPaint(Color.black)
    renderer.setIncludeBaseInRange(false)
    plot.setRenderer(renderer)

    // ensure the current theme is applied to the renderer just added
    ChartUtils.applyCurrentTheme(chart)

    renderer.setDefaultItemLabelGenerator(
        StandardCategoryItemLabelGenerator()
    )
    renderer.setDefaultItemLabelsVisible(true)
    renderer.setDefaultItemLabelPaint(Color.yellow)
    renderer.setDefaultPositiveItemLabelPosition(
        ItemLabelPosition(
            ItemLabelAnchor.INSIDE6, TextAnchor.BOTTOM_CENTER
        )
    )

    // set up gradient paints for series...
    val gp0 = GradientPaint(
        0.0f, 0.0f, Color.blue,
        0.0f, 0.0f, Color(0, 0, 64)
    )
    val gp1 = GradientPaint(
        0.0f, 0.0f, Color.green,
        0.0f, 0.0f, Color(0, 64, 0)
    )
    renderer.setSeriesPaint(0, gp0)
    renderer.setSeriesPaint(1, gp1)
    return chart
}


fun main(args: Array<String>) {
    val chart: JFreeChart = createChart(createDataset())
    val g2: SVGGraphics2D = SVGGraphics2D(600.0, 400.0)
    val r = Rectangle(0, 0, 600, 400)
    chart.draw(g2, r)
    val f = File("SVGBarChartDemo1.svg")
    SVGUtils.writeToSVG(f, g2.getSVGElement())
}